[
    {
      "question": "Was ist JSX?",
      "answer": "JSX ist eine Syntaxerweiterung für JavaScript, die HTML-ähnlichen Code in React ermöglicht.",
      "difficulty": 1,
      "categories": ["React Basics"]
    },
    {
      "question": "Was sind React Hooks?",
      "answer": "Hooks sind Funktionen, die es ermöglichen, in funktionalen Komponenten State und Lifecycle-Methoden zu nutzen.",
      "difficulty": 2,
      "categories": ["React Hooks"]
    },
    {
      "question": "Was ist der Unterschied zwischen State und Props?",
      "answer": "State ist veränderlich und gehört zur Komponente, Props sind unveränderliche Werte, die von Elternkomponenten übergeben werden.",
      "difficulty": 1,
      "categories": ["React Basics"]
    },
    {
      "question": "Was macht useEffect()?",
      "answer": "useEffect() führt Nebenwirkungen in funktionalen Komponenten aus, z. B. Datenabruf oder Event-Listener.",
      "difficulty": 2,
      "categories": ["React Hooks"]
    },
    {
      "question": "Was ist der Virtual DOM?",
      "answer": "Ein optimiertes Abbild des DOM, das React nutzt, um Änderungen effizient zu berechnen und das echte DOM minimal zu aktualisieren.",
      "difficulty": 2,
      "categories": ["React Performance"]
    },
    {
      "question": "Was ist eine Controlled Component?",
      "answer": "Eine Komponente, bei der der Wert eines Formularfelds vom React State kontrolliert wird.",
      "difficulty": 1,
      "categories": ["React Forms"]
    },
    {
      "question": "Was ist Redux?",
      "answer": "Ein State-Management-Tool für React-Apps, das einen globalen Store für den Zustand der Anwendung bereitstellt.",
      "difficulty": 3,
      "categories": ["State Management"]
    },
    {
      "question": "Was ist eine Middleware in Redux?",
      "answer": "Eine Funktion, die zwischen Action-Dispatch und Reducer-Update läuft, z. B. für Logging oder API-Aufrufe.",
      "difficulty": 3,
      "categories": ["State Management"]
    },
    {
      "question": "Was macht useState()?",
      "answer": "useState() ermöglicht das Verwenden von lokalem State in funktionalen Komponenten.",
      "difficulty": 1,
      "categories": ["React Hooks"]
    },
    {
      "question": "Was ist der Unterschied zwischen useMemo und useCallback?",
      "answer": "useMemo speichert berechnete Werte, useCallback speichert eine Funktion, um unnötige Neuberechnungen zu vermeiden.",
      "difficulty": 2,
      "categories": ["React Performance"]
    },
    {
      "question": "Was ist der Unterschied zwischen Server-Side Rendering und Client-Side Rendering?",
      "answer": "SSR rendert Inhalte auf dem Server, CSR rendert Inhalte im Browser mit JavaScript.",
      "difficulty": 3,
      "categories": ["Web Performance"]
    },
    {
      "question": "Was ist Next.js?",
      "answer": "Ein React-Framework für Server-Side Rendering, Routing und API-Handling.",
      "difficulty": 2,
      "categories": ["Full Stack"]
    },
    {
      "question": "Was ist eine REST API?",
      "answer": "Ein Architekturstil für APIs, bei dem HTTP-Methoden zum Zugriff auf Ressourcen genutzt werden.",
      "difficulty": 1,
      "categories": ["Backend"]
    },
    {
      "question": "Was ist GraphQL?",
      "answer": "Eine Abfragesprache für APIs, die es Clients ermöglicht, genau die benötigten Daten zu erhalten.",
      "difficulty": 2,
      "categories": ["Backend"]
    },
    {
      "question": "Wie funktioniert Authentication in einer Full-Stack-App?",
      "answer": "Typischerweise mit JWT-Token oder Session-Cookies in Verbindung mit einem Backend.",
      "difficulty": 3,
      "categories": ["Full Stack"]
    }
  ]